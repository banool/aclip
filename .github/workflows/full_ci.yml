name: CI

on:
  push:
    branches: [main]

jobs:
  # Check which files / paths have changed.
  # We use this to inform whether we should run later jobs.
  changes:
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      move_module: ${{ steps.filter.outputs.move_module }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: '.github/filters.yml'
    - name: Print changes
      run: printf "Frontend changed $FRONTEND\nMove module changed $MOVE_MODULE\n"
      env:
        FRONTEND: ${{ steps.filter.outputs.frontend }}
        MOVE_MODULE: ${{ steps.filter.outputs.move_module }}


  # Run the move module tests.
  test_move_module:
    needs: [changes]
    if: needs.changes.outputs.move_module == 'true'
    defaults:
      run:
        working-directory: ./move
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: wget https://github.com/aptos-labs/aptos-core/releases/download/cli-latest/aptos-v0.1.0-linux-x86_64.zip -O cli.zip
    - run: unzip cli.zip
    - run: ./aptos move test
  

  # Publish the move module.
  publish_move_module:
    needs: [test_move_module]
    if: needs.tests.outputs.move_module == 'true'
    defaults:
      run:
        working-directory: ./move
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: wget https://github.com/aptos-labs/aptos-core/releases/download/aptos-cli-v0.1.1/aptos-cli-0.1.1-Ubuntu-x86_64.zip -O cli.zip
    - run: unzip cli.zip
    - run: yes "" | ./aptos init --assume-yes --private-key ${{ secrets.APTOS_ACCOUNT_PRIVATE_KEY }}
    - run: ./aptos move publish
    - run: wget https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64.tar.gz -O - | tar xz && mv yq_linux_amd64 /usr/bin/yq
    - run: ./aptos move run --function-id "$(yq .profiles.default.account < .aptos/config.yaml)::$(cat move_module/sources/AptosInfiniteJukebox.move | grep -o -E 'JukeboxV\d+' | head -n 1)::initialize_jukebox" --max-gas 10000

  # Update the web infrastructure if necessary. We always run this action so
  # we have the outputs for later steps. 
  update_web_infrastructure:
    defaults:
      run:
        working-directory: ./deployment/web
    outputs:
      bucketUrl: ${{ steps.pulumi.outputs.bucketUrl }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v2
      with:
        node-version: 18.x
    # TODO: Use WIF when gsutil supports it:
    # https://github.com/GoogleCloudPlatform/gsutil/issues/1407
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'
    - run: npm install
    - uses: pulumi/actions@v3
      id: pulumi
      with:
        command: up
        stack-name: prod
        work-dir: ./deployment/web
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}
        GOOGLE_REGION: ${{ secrets.GCP_REGION }}


  # Build / test web and push it.
  push_web:
    defaults:
      run:
        working-directory: ./frontend
    needs: [update_web_infrastructure]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'
    - uses: subosito/flutter-action@v1
      with:
        flutter-version: '3.0.1'
        channel: stable
    
    # Switch to the web build.
    - run: ./switch_web.sh web

    # Test and build 
    - run: flutter pub get
    - run: flutter test
    - run: flutter build web

    # Copy the files into the GCP bucket.
    - run: echo "${{ needs.update_web_infrastructure.outputs.bucketUrl }}"
    - run: gsutil rsync -R build/web/ "${{ needs.update_web_infrastructure.outputs.bucketUrl }}"


  # Build, test, sign, publish Android build.
  build_android:
    needs: [changes]
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
    - uses: actions/checkout@v3

    - run: echo "${{ secrets.UPLOAD_KEYSTORE }}" | base64 -d > android/upload_keystore.jks
    - run: echo "${{ secrets.KEY_PROPERTIES }}" | base64 -d > android/key.properties

    - run: sudo apt update
    - run: sudo apt upgrade -y
    - run: sudo apt install curl wget clang cmake ninja-build libgtk-3-dev pkg-config libssl-dev build-essential

    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install Rust stable
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          override: true
    
    - run: rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android

    - uses: nttld/setup-ndk@v1
      id: setupndk
      with:
        ndk-version: r24
        add-to-path: false

    - run: native/fix_ndk_gcc.sh
      env:
        ANDROID_NDK_HOME: ${{ steps.setupndk.outputs.ndk-path }}

    - run: cargo install cargo-ndk

    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.0.1'
        channel: stable

    - run: flutter pub get

    - run: flutter test
    # This will produce a signed appbundle.
    - run: flutter build appbundle
      env:
        ANDROID_NDK_HOME: ${{ steps.setupndk.outputs.ndk-path }}

    # Publish release
    - name: Publish Android build to internal track
      uses: r0adkll/upload-google-play@v1.0.15
      with:
        serviceAccountJsonPlainText: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
        packageName: com.banool.aclip
        releaseFile: frontend/build/app/outputs/bundle/release/app-release.aab
        track: internal
