// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_Options> api2wire_box_autoadd_options(Options raw) {
    final ptr = inner.new_box_autoadd_options_0();
    _api_fill_to_wire_options(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_opt_StringList(List<String>? raw) {
    return raw == null ? ffi.nullptr : api2wire_StringList(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_options(
      Options apiObj, ffi.Pointer<wire_Options> wireObj) {
    _api_fill_to_wire_options(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_options(Options apiObj, wire_Options wireObj) {
    wireObj.no_audio = api2wire_bool(apiObj.noAudio);
    wireObj.base_url = api2wire_opt_String(apiObj.baseUrl);
    wireObj.blacklist_domains = api2wire_bool(apiObj.blacklistDomains);
    wireObj.no_css = api2wire_bool(apiObj.noCss);
    wireObj.charset = api2wire_opt_String(apiObj.charset);
    wireObj.domains = api2wire_opt_StringList(apiObj.domains);
    wireObj.ignore_errors = api2wire_bool(apiObj.ignoreErrors);
    wireObj.no_frames = api2wire_bool(apiObj.noFrames);
    wireObj.no_fonts = api2wire_bool(apiObj.noFonts);
    wireObj.no_images = api2wire_bool(apiObj.noImages);
    wireObj.isolate = api2wire_bool(apiObj.isolate);
    wireObj.no_js = api2wire_bool(apiObj.noJs);
    wireObj.insecure = api2wire_bool(apiObj.insecure);
    wireObj.no_metadata = api2wire_bool(apiObj.noMetadata);
    wireObj.output = api2wire_String(apiObj.output);
    wireObj.silent = api2wire_bool(apiObj.silent);
    wireObj.timeout = api2wire_u64(apiObj.timeout);
    wireObj.user_agent = api2wire_opt_String(apiObj.userAgent);
    wireObj.no_video = api2wire_bool(apiObj.noVideo);
    wireObj.target = api2wire_String(apiObj.target);
    wireObj.no_color = api2wire_bool(apiObj.noColor);
    wireObj.unwrap_noscript = api2wire_bool(apiObj.unwrapNoscript);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_download_page(
    int port_,
    ffi.Pointer<wire_Options> options,
  ) {
    return _wire_download_page(
      port_,
      options,
    );
  }

  late final _wire_download_pagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Options>)>>('wire_download_page');
  late final _wire_download_page = _wire_download_pagePtr
      .asFunction<void Function(int, ffi.Pointer<wire_Options>)>();

  void wire_platform(
    int port_,
  ) {
    return _wire_platform(
      port_,
    );
  }

  late final _wire_platformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_platform');
  late final _wire_platform =
      _wire_platformPtr.asFunction<void Function(int)>();

  void wire_rust_release_mode(
    int port_,
  ) {
    return _wire_rust_release_mode(
      port_,
    );
  }

  late final _wire_rust_release_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_release_mode');
  late final _wire_rust_release_mode =
      _wire_rust_release_modePtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_Options> new_box_autoadd_options_0() {
    return _new_box_autoadd_options_0();
  }

  late final _new_box_autoadd_options_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Options> Function()>>(
          'new_box_autoadd_options_0');
  late final _new_box_autoadd_options_0 = _new_box_autoadd_options_0Ptr
      .asFunction<ffi.Pointer<wire_Options> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Options extends ffi.Struct {
  @ffi.Bool()
  external bool no_audio;

  external ffi.Pointer<wire_uint_8_list> base_url;

  @ffi.Bool()
  external bool blacklist_domains;

  @ffi.Bool()
  external bool no_css;

  external ffi.Pointer<wire_uint_8_list> charset;

  external ffi.Pointer<wire_StringList> domains;

  @ffi.Bool()
  external bool ignore_errors;

  @ffi.Bool()
  external bool no_frames;

  @ffi.Bool()
  external bool no_fonts;

  @ffi.Bool()
  external bool no_images;

  @ffi.Bool()
  external bool isolate;

  @ffi.Bool()
  external bool no_js;

  @ffi.Bool()
  external bool insecure;

  @ffi.Bool()
  external bool no_metadata;

  external ffi.Pointer<wire_uint_8_list> output;

  @ffi.Bool()
  external bool silent;

  @ffi.Uint64()
  external int timeout;

  external ffi.Pointer<wire_uint_8_list> user_agent;

  @ffi.Bool()
  external bool no_video;

  external ffi.Pointer<wire_uint_8_list> target;

  @ffi.Bool()
  external bool no_color;

  @ffi.Bool()
  external bool unwrap_noscript;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
